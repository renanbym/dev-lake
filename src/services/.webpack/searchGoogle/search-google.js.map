{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"babel-runtime/core-js/json/stringify\"","webpack:///external \"babel-runtime/core-js/promise\"","webpack:///external \"mongoose\"","webpack:///external \"aws-sdk\"","webpack:///./search-google.js","webpack:///external \"google-it\"","webpack:///../_core/connection.js","webpack:///../_core/secrets-storage.js","webpack:///../models/Perfil.js","webpack:///external \"bluebird\"","webpack:///../_core/aws-build-request.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","google","connect","Perfil","requestQueue","handler","async","event","context","callback","callbackWaitsForEmptyEventLoop","data","isOffline","JSON","parse","body","parseBody","search","position","location","dataPerfil","update","url","$set","status","$addToSet","upsert","new","id","_id","test","link","statusCode","error","message","mongoose","getSecret","connection","isConnected","replacerRegexStringify","val","constructor","RegExp","toString","customLogger","coll","op","doc","proj","process","stdout","write","verbose","resolve","reject","set","console","log","connectionString","reconnectTries","Number","MAX_VALUE","reconnectInterval","e","disconnect","close","ssm","SSM","region","env","AWS_REGION","secrets","expiryIn","Date","searchKey","getAll","getParameters","result","getParametersByPath","ssmParams","promise","Parameters","Name","replace","Path","Value","NextToken","getTime","Recursive","WithDecryption","Promise","modelSchema","Schema","type","String","index","unique","enum","headline","summary","positions","title","company","description","date1","date2","roles","educations","degree","skills","count","ranking","permanencia","date","default","now","global","model","AWS","environment","STAGE","service","SERVERLESS_SERVICE","buildSns","accountId","ENV","IS_OFFLINE","IS_LOCAL","sns","SNS","params","MessageStructure","endpoint","Message","TopicArn","ACCOUNT_ID","publish","requestLambda","payload","serviceOveride","local","lambda","Lambda","req","FunctionName","InvocationType","Payload","invoke","serviceName","queueUrl","DEV_ACCOUNT_ID","sqs","SQS","MessageBody","QueueUrl","sendMessage","deleteMessage","ReceiptHandle"],"mappings":"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","file":"search-google.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = require(\"babel-runtime/core-js/json/stringify\");","module.exports = require(\"babel-runtime/core-js/promise\");","module.exports = require(\"mongoose\");","module.exports = require(\"aws-sdk\");","const google = require('google-it')\nconst { connect } = require('../_core/connection')\nconst Perfil = require('../models/Perfil')\nconst { requestQueue } = require('../_core/aws-build-request');\n\nconst parseBody = (event) => {\n\n  if (event.isOffline) {\n    return event\n  } else {\n    return JSON.parse(event.body)\n  }\n\n}\n\nconst handler = async (event, context, callback) => {\n  context.callbackWaitsForEmptyEventLoop = false;\n  try {\n\n    const data = parseBody(event);\n    await connect();\n\n    const search = await google({ 'no-display': true, 'only-urls': true, 'limit': 100, 'query': `site:linkedin.com/in/ AND \"${data.position}\" AND \"${data.location}\"` });\n\n    const create = async (url) => {\n      const dataPerfil = await Perfil.update(\n        { url },\n        { $set: { url, status: 'created' }, $addToSet: { search: { position: data.position, location: data.location } } },\n        { upsert: true, new: true }\n      );\n      await requestQueue({ id: dataPerfil._id }, 'updateProfileQueue');\n    }\n\n\n    for (const url of search) {\n\n      if (/^https?\\:\\/\\/[a-z]{0,2}?\\.linkedin\\.com\\/in\\//.test(url.link)) {\n        await create(url.link)\n      }\n\n    }\n\n\n    return callback(null, { statusCode: 200, body: JSON.stringify({ search }) });\n  } catch (error) {\n    return callback(null, { statusCode: 400, body: JSON.stringify({ error: error.message }) });\n  }\n\n\n};\n\n\nmodule.exports.handler = handler","module.exports = require(\"google-it\");","const mongoose = require('mongoose');\nconst { getSecret } = require('./secrets-storage');\nlet isConnected = false;\nlet connection;\n\nconst replacerRegexStringify = (name, val) => {\n    // // convert RegExp to string\n    if (val && val.constructor === RegExp) {\n        return val.toString();\n    } else if (name === 'str') {\n        return undefined;\n    }\n    return val;\n};\n\nconst customLogger = (coll, op, doc, proj) => {\n    process.stdout.write(`${coll}.${op}(${JSON.stringify(doc, replacerRegexStringify)}`);\n    if (proj) {\n        process.stdout.write(`,${JSON.stringify(proj, replacerRegexStringify)})\\n`);\n    } else {\n        process.stdout.write(')\\n');\n    }\n};\n\n\nconst connect = (verbose = false) => new Promise(async (resolve, reject) => {\n\n    try {\n        if (verbose) {\n            mongoose.set('debug', customLogger);\n        }\n\n        if (isConnected) {\n            console.log('===> Aproveitando conexao');\n            return resolve(connection);\n        }\n\n        const connectionString = await getSecret('mongodb_uri')\n        console.log(connectionString)\n        connection = await mongoose.connect(connectionString, {\n            reconnectTries: Number.MAX_VALUE,\n            reconnectInterval: 1000\n        });\n\n        if (connection === mongoose) {\n            isConnected = true;\n            return resolve(connection);\n        }\n\n        return reject('error');\n    } catch (e) {\n        console.log('===> connect error', e);\n        return reject(e);\n    }\n});\n\nconst disconnect = () => new Promise(async (resolve, reject) => {\n    try {\n        mongoose.connection.close(() => {\n            isConnected = false;\n            console.log('===> Desconectando conexao');\n            resolve();\n        });\n    } catch (e) {\n        console.log('===> disconnect error', e);\n        return reject(e);\n    }\n});\n\n\nmodule.exports = { connect, disconnect, mongoose };","const AWS = require('aws-sdk');\n\nconst ssm = new AWS.SSM({ region: process.env.AWS_REGION });\n\nconst EXPIRY_TIME = 3 * 60 * 1000; // 3 min\nlet secrets;\nlet expiryIn = new Date(0);\n\nconst searchKey = key => secrets[key];\n\nconst getAll = () => new Promise((resolve, reject) => {\n    secrets = {};\n\n    try {\n        const params = {\n            Recursive: true,\n            WithDecryption: true\n        };\n\n        const getParameters = async (ssmParams) => {\n            const result = await ssm.getParametersByPath(ssmParams).promise();\n            console.log(result);\n            for (const p of result.Parameters) {\n                const key = p.Name.replace(`${ssmParams.Path}/`, '');\n                secrets[key] = p.Value;\n            }\n\n            if (result.NextToken) {\n                ssmParams.NextToken = result.NextToken;\n                getParameters(ssmParams);\n            } else {\n                expiryIn = new Date(new Date().getTime() + EXPIRY_TIME);\n                return resolve(secrets);\n            }\n        };\n\n        return getParameters(params);\n    } catch (e) {\n        return reject(('Not Found Secret'));\n    }\n\n});\n\nconst getSecret = key => new Promise(async (resolve, reject) => {\n    try {\n        let result;\n\n\n        const now = new Date();\n        if (now >= expiryIn) {\n            secrets = null;\n        }\n\n        if (secrets) {\n            // já carregou, busca a chave\n            result = searchKey(key);\n\n            if (result) {\n                return resolve(result);\n            }\n\n            throw ('Not Found Secret.');\n        }\n\n        await getAll();\n\n        if (secrets) {\n            result = searchKey(key);\n\n            if (result) {\n                return resolve(result);\n            }\n            return reject(('Not Found Secret!'));\n        }\n    } catch (e) {\n        return reject(('Not Found Secret'));\n    }\n});\n\nmodule.exports = { getSecret, getAll };","import mongoose, { Schema } from 'mongoose';\nmongoose.Promise = require('bluebird');\nconst modelSchema = new Schema({\n    url: { type: String, require: true, index: { unique: true } },\n    status: { type: String, enum: ['created', 'updated', 'modernize'], require: true },\n    name: String,\n    headline: String,\n    location: String,\n    summary: String,\n    positions: [{\n        _id: false,\n        title: { type: String },\n        company: { type: String },\n        description: { type: String },\n        date1: { type: String },\n        date2: { type: String },\n        roles: [{\n            _id: false,\n            title: { type: String },\n            company: { type: String },\n            description: { type: String },\n            date1: { type: String },\n            date2: { type: String },\n        }]\n    }],\n    educations: [{\n        _id: false,\n        title: String,\n        degree: String,\n        date1: Date,\n        date2: Date\n    }],\n    skills: [{\n        _id: false,\n        title: String,\n        count: Number\n    }],\n    search: [\n        {\n            _id: false,\n            position: String,\n            location: String\n        }\n    ],\n    ranking: {\n        _id: false,\n        permanencia: String,\n    },\n    date: { type: Date, default: Date.now },\n    update: { type: Date, default: Date.now },\n})\n\nglobal.modelSchema = global.modelSchema || mongoose.model('Perfil', modelSchema);\nmodule.exports = global.modelSchema;","module.exports = require(\"bluebird\");","const AWS = require('aws-sdk');\n\nconst region = process.env.AWS_REGION;\nconst environment = process.env.STAGE;\nconst service = process.env.SERVERLESS_SERVICE;\n\nconst buildSns = async (message, event, accountId = '123456789012') => {\n\n  if (process.env.ENV === 'testing' || process.env.IS_OFFLINE || process.env.IS_LOCAL) return true;\n\n  let sns = new AWS.SNS();\n\n  const params = {};\n\n  if (typeof message === 'object') {\n    params.MessageStructure = 'json';\n    message = JSON.stringify({\n      default: JSON.stringify(message)\n    });\n  }\n\n  if (process.env.IS_LOCAL || process.env.IS_OFFLINE) {\n    sns = new AWS.SNS({\n      endpoint: 'http://127.0.0.1:4002',\n      region\n    });\n    params.Message = message;\n    params.TopicArn = `arn:aws:sns:${region}:${accountId}:${event}${environment}`;\n  } else {\n    accountId = process.env.ACCOUNT_ID;\n    params.Message = message;\n    params.TopicArn = `arn:aws:sns:${region}:${accountId}:${event}${environment}`;\n  }\n\n  await sns.publish(params).promise();\n\n};\n\nconst requestLambda = (payload, event, serviceOveride = null, local = false) => {\n  if (process.env.ENV === 'testing' || process.env.IS_OFFLINE || process.env.IS_LOCAL) return true;\n\n  let lambda;\n\n  if ((process.env.IS_LOCAL || process.env.IS_OFFLINE) && local) {\n    lambda = new AWS.Lambda({\n      endpoint: local.endpoint\n    });\n  } else {\n    lambda = new AWS.Lambda();\n  }\n\n  const serviceName = serviceOveride || service;\n\n  const req = {\n    FunctionName: `${serviceName}-${environment}-${event}`,\n    InvocationType: 'Event',\n    Payload: JSON.stringify(payload)\n  };\n\n  const resp = lambda.invoke(req).promise();\n  return resp;\n\n};\n\n\nconst requestQueue = async (message, event, serviceOveride = null) => {\n\n  if (process.env.ENV === 'testing' || process.env.IS_OFFLINE || process.env.IS_LOCAL) return true;\n\n  const serviceName = serviceOveride || service;\n\n  const accountId = (process.env.IS_LOCAL || process.env.IS_OFFLINE) ? process.env.DEV_ACCOUNT_ID : process.env.ACCOUNT_ID;\n  const queueUrl = `https://sqs.us-east-1.amazonaws.com/${accountId}/${serviceName}-${environment}-${event}`;\n\n  const sqs = new AWS.SQS({\n    region\n  });\n\n  if (typeof message === 'object') message = JSON.stringify(message);\n\n  const params = {\n    MessageBody: message,\n    QueueUrl: queueUrl\n  };\n\n  const sendSQS = sqs.sendMessage(params).promise();\n  return sendSQS;\n\n};\n\nconst deleteMessage = (event, ReceiptHandle, serviceOveride = null) => {\n\n  if (process.env.ENV === 'testing' || process.env.IS_OFFLINE || process.env.IS_LOCAL) return true;\n\n  const serviceName = serviceOveride || service;\n\n  const accountId = (process.env.IS_LOCAL || process.env.IS_OFFLINE) ? process.env.DEV_ACCOUNT_ID : process.env.ACCOUNT_ID;\n  const queueUrl = (process.env.IS_LOCAL || process.env.IS_OFFLINE) ? `http://localhost:4576/queue/${event}` : `https://sqs.us-east-1.amazonaws.com/${accountId}/${serviceName}-${environment}-${event}`;\n\n  const sqs = new AWS.SQS({\n    region\n  });\n\n  const params = {\n    QueueUrl: queueUrl,\n    ReceiptHandle\n  };\n  const sendSQS = sqs.deleteMessage(params).promise();\n  return sendSQS;\n\n};\n\nmodule.exports = { buildSns, requestLambda, requestQueue, deleteMessage };"],"sourceRoot":""}